"use strict";
exports.__esModule = true;
exports.useConsoleLogger = exports.useLogger = exports.setLogLevel = exports.LogLevels = void 0;
require("colors");
var logger_1 = require("./logger");
var LogLevels;
(function (LogLevels) {
    LogLevels[LogLevels["silent"] = 0] = "silent";
    LogLevels[LogLevels["error"] = 1] = "error";
    LogLevels[LogLevels["warn"] = 2] = "warn";
    LogLevels[LogLevels["info"] = 3] = "info";
    LogLevels[LogLevels["debug"] = 4] = "debug";
    LogLevels[LogLevels["trace"] = 5] = "trace";
})(LogLevels = exports.LogLevels || (exports.LogLevels = {}));
var logLevel = LogLevels.info;
exports.setLogLevel = function (level) {
    logLevel = level;
};
var logger = new logger_1.BitBucketLogger();
exports.useLogger = function (newLogger) {
    logger = newLogger;
};
exports.useConsoleLogger = function () {
    logger = new logger_1.ConsoleLogger();
};
var debug = function () {
    var message = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        message[_i] = arguments[_i];
    }
    if (logLevel < LogLevels.debug) {
        return;
    }
    logger.debug.apply(logger, message);
};
var info = function () {
    var message = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        message[_i] = arguments[_i];
    }
    if (logLevel < LogLevels.info) {
        return;
    }
    logger.info.apply(logger, message);
};
var infoNameValue = function (message, value) {
    if (logLevel < LogLevels.info) {
        return;
    }
    var outputValue = value || '';
    logger.log(message.blue, outputValue.white);
};
var warn = function () {
    var message = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        message[_i] = arguments[_i];
    }
    if (logLevel < LogLevels.warn) {
        return;
    }
    logger.warn.apply(logger, message);
};
var error = function () {
    var message = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        message[_i] = arguments[_i];
    }
    if (logLevel < LogLevels.error) {
        return;
    }
    logger.error.apply(logger, message);
};
var trace = function () {
    var message = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        message[_i] = arguments[_i];
    }
    if (logLevel < LogLevels.trace) {
        return;
    }
    logger.trace.apply(logger, message);
};
exports["default"] = {
    error: error,
    warn: warn,
    info: info,
    infoNameValue: infoNameValue,
    setLogLevel: exports.setLogLevel,
    debug: debug,
    useConsoleLogger: exports.useConsoleLogger,
    trace: trace,
    useLogger: exports.useLogger
};
//# sourceMappingURL=index.js.map