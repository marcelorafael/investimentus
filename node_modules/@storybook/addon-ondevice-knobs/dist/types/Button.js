"use strict";

require("core-js/modules/es.function.name");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _native = _interopRequireDefault(require("@emotion/native"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Label =
/*#__PURE__*/
_native["default"].Text(function (_ref) {
  var theme = _ref.theme;
  return {
    fontSize: 17,
    color: theme.labelColor || 'black'
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9CdXR0b24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS2MiLCJmaWxlIjoiLi4vLi4vc3JjL3R5cGVzL0J1dHRvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL25hdGl2ZSc7XG5cbmNvbnN0IExhYmVsID0gc3R5bGVkLlRleHQoKHsgdGhlbWUgfSkgPT4gKHtcbiAgZm9udFNpemU6IDE3LFxuICBjb2xvcjogdGhlbWUubGFiZWxDb2xvciB8fCAnYmxhY2snLFxufSkpO1xuXG5jb25zdCBCdXR0b25UeXBlID0gKHsga25vYiwgb25QcmVzcyB9KSA9PiAoXG4gIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXt7IG1hcmdpbjogMTAgfX0gb25QcmVzcz17KCkgPT4gb25QcmVzcyhrbm9iKX0+XG4gICAgPExhYmVsPntrbm9iLm5hbWV9PC9MYWJlbD5cbiAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuKTtcblxuQnV0dG9uVHlwZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGtub2I6IHt9LFxufTtcblxuQnV0dG9uVHlwZS5wcm9wVHlwZXMgPSB7XG4gIGtub2I6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSksXG4gIG9uUHJlc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5CdXR0b25UeXBlLnNlcmlhbGl6ZSA9ICh2YWx1ZSkgPT4gdmFsdWU7XG5CdXR0b25UeXBlLmRlc2VyaWFsaXplID0gKHZhbHVlKSA9PiB2YWx1ZTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uVHlwZTtcbiJdfQ== */");

var ButtonType = function ButtonType(_ref2) {
  var knob = _ref2.knob,
      _onPress = _ref2.onPress;
  return _react["default"].createElement(_reactNative.TouchableOpacity, {
    style: {
      margin: 10
    },
    onPress: function onPress() {
      return _onPress(knob);
    }
  }, _react["default"].createElement(Label, null, knob.name));
};

ButtonType.defaultProps = {
  knob: {}
};
ButtonType.propTypes = {
  knob: _propTypes["default"].shape({
    name: _propTypes["default"].string
  }),
  onPress: _propTypes["default"].func.isRequired
};

ButtonType.serialize = function (value) {
  return value;
};

ButtonType.deserialize = function (value) {
  return value;
};

var _default = ButtonType;
exports["default"] = _default;