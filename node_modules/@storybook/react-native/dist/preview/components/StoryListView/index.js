"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var native_1 = __importDefault(require("@emotion/native"));
var core_events_1 = __importDefault(require("@storybook/core-events"));
var addons_1 = __importDefault(require("@storybook/addons"));
var text_1 = require("../Shared/text");
var SearchBar = native_1.default.TextInput({
    borderTopLeftRadius: 5,
    borderTopRightRadius: 5,
    borderBottomLeftRadius: 5,
    borderBottomRightRadius: 5,
    fontSize: 16,
    marginHorizontal: 5,
    marginVertical: 5,
    paddingHorizontal: 5,
    paddingVertical: 5,
}, function (_a) {
    var theme = _a.theme;
    return ({
        backgroundColor: theme.borderColor || '#e6e6e6',
        color: theme.buttonActiveTextColor || '#444444',
    });
});
var HeaderContainer = native_1.default.View({
    paddingVertical: 5,
    marginLeft: 5,
});
var SectionHeader = function (_a) {
    var title = _a.title, selected = _a.selected;
    return (react_1.default.createElement(HeaderContainer, { key: title },
        react_1.default.createElement(text_1.Header, { selected: selected }, title)));
};
var ItemTouchable = native_1.default.TouchableOpacity({
    paddingHorizontal: 16,
    paddingVertical: 5,
});
var ListItem = function (_a) {
    var kind = _a.kind, title = _a.title, selected = _a.selected, onPress = _a.onPress;
    return (react_1.default.createElement(ItemTouchable, { key: title, onPress: onPress, activeOpacity: 0.8, testID: "Storybook.ListItem." + kind + "." + title, accessibilityLabel: "Storybook.ListItem." + title },
        react_1.default.createElement(text_1.Name, { selected: selected }, title)));
};
var List = native_1.default.SectionList({
    flex: 1,
    marginBottom: 40,
});
var StoryListView = /** @class */ (function (_super) {
    __extends(StoryListView, _super);
    function StoryListView(props) {
        var _this = _super.call(this, props) || this;
        _this.forceReRender = function () {
            _this.forceUpdate();
        };
        _this.handleStoryAdded = function () {
            var stories = _this.props.stories;
            if (stories) {
                var data = Object.values(stories
                    .raw()
                    .reduce(function (acc, story) {
                    acc[story.kind] = {
                        title: story.kind,
                        data: (acc[story.kind] ? acc[story.kind].data : []).concat(story),
                    };
                    return acc;
                }, {}));
                _this.setState({ data: data, originalData: data });
            }
        };
        _this.handleChangeSearchText = function (text) {
            var query = text.trim();
            var data = _this.state.originalData;
            if (!query) {
                _this.setState({ data: data });
                return;
            }
            var checkValue = function (value) { return value.toLowerCase().includes(query.toLowerCase()); };
            var filteredData = data.reduce(function (acc, story) {
                var hasTitle = checkValue(story.title);
                var hasKind = story.data.some(function (ref) { return checkValue(ref.name); });
                if (hasTitle || hasKind) {
                    acc.push(__assign(__assign({}, story), { 
                        // in case the query matches component's title, all of its stories will be shown
                        data: !hasTitle ? story.data.filter(function (ref) { return checkValue(ref.name); }) : story.data }));
                }
                return acc;
            }, []);
            _this.setState({ data: filteredData });
        };
        _this.state = {
            data: [],
            originalData: [],
        };
        return _this;
    }
    StoryListView.prototype.componentDidMount = function () {
        var channel = addons_1.default.getChannel();
        channel.on(core_events_1.default.STORY_ADDED, this.handleStoryAdded);
        channel.on(core_events_1.default.SELECT_STORY, this.forceReRender);
        this.handleStoryAdded();
    };
    StoryListView.prototype.componentWillUnmount = function () {
        var channel = addons_1.default.getChannel();
        channel.removeListener(core_events_1.default.STORY_ADDED, this.handleStoryAdded);
        channel.removeListener(core_events_1.default.SELECT_STORY, this.forceReRender);
    };
    StoryListView.prototype.changeStory = function (storyId) {
        var channel = addons_1.default.getChannel();
        channel.emit(core_events_1.default.SET_CURRENT_STORY, { storyId: storyId });
    };
    StoryListView.prototype.render = function () {
        var _this = this;
        var stories = this.props.stories;
        var storyId = stories.getSelection().storyId;
        var selectedStory = stories.fromId(storyId);
        var data = this.state.data;
        return (react_1.default.createElement(react_native_1.SafeAreaView, { style: { flex: 1 } },
            react_1.default.createElement(SearchBar, { testID: "Storybook.ListView.SearchBar", clearButtonMode: "while-editing", disableFullscreenUI: true, onChangeText: this.handleChangeSearchText, placeholder: "Filter", returnKeyType: "search" }),
            react_1.default.createElement(List, { testID: "Storybook.ListView", renderItem: function (_a) {
                    var item = _a.item;
                    return (react_1.default.createElement(ListItem, { title: item.name, kind: item.kind, selected: selectedStory && item.id === selectedStory.id, onPress: function () { return _this.changeStory(item.id); } }));
                }, renderSectionHeader: function (_a) {
                    var title = _a.section.title;
                    return (react_1.default.createElement(SectionHeader, { title: title, selected: selectedStory && title === selectedStory.kind }));
                }, keyExtractor: function (item, index) { return item + index; }, sections: data, stickySectionHeadersEnabled: false })));
    };
    return StoryListView;
}(react_1.Component));
exports.default = StoryListView;
