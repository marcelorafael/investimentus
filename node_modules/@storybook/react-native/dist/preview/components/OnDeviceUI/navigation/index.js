"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable react/destructuring-assignment */
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var react_native_swipe_gestures_1 = __importDefault(require("react-native-swipe-gestures"));
var bar_1 = __importDefault(require("./bar"));
var visibility_button_1 = __importDefault(require("./visibility-button"));
var SWIPE_CONFIG = {
    velocityThreshold: 0.2,
    directionalOffsetThreshold: 80,
};
var Navigation = /** @class */ (function (_super) {
    __extends(Navigation, _super);
    function Navigation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isUIVisible: _this.props.initialUiVisible !== undefined ? _this.props.initialUiVisible : true,
        };
        _this.handleToggleUI = function () {
            var isUIVisible = _this.state.isUIVisible;
            _this.setState({ isUIVisible: !isUIVisible });
        };
        _this.handleSwipeLeft = function () {
            var _a = _this.props, tabOpen = _a.tabOpen, onChangeTab = _a.onChangeTab;
            if (tabOpen < 1) {
                onChangeTab(tabOpen + 1);
            }
        };
        _this.handleSwipeRight = function () {
            var _a = _this.props, tabOpen = _a.tabOpen, onChangeTab = _a.onChangeTab;
            if (tabOpen > -1) {
                onChangeTab(tabOpen - 1);
            }
        };
        return _this;
    }
    Navigation.prototype.render = function () {
        var _a = this.props, tabOpen = _a.tabOpen, onChangeTab = _a.onChangeTab;
        var isUIVisible = this.state.isUIVisible;
        return (react_1.default.createElement(react_native_1.View, null,
            react_1.default.createElement(react_native_1.SafeAreaView, null,
                isUIVisible && (react_1.default.createElement(react_native_swipe_gestures_1.default, { onSwipeLeft: this.handleSwipeLeft, onSwipeRight: this.handleSwipeRight, config: SWIPE_CONFIG },
                    react_1.default.createElement(bar_1.default, { index: tabOpen, onPress: onChangeTab }))),
                react_1.default.createElement(react_native_1.View, null,
                    react_1.default.createElement(visibility_button_1.default, { onPress: this.handleToggleUI })))));
    };
    return Navigation;
}(react_1.PureComponent));
exports.default = Navigation;
