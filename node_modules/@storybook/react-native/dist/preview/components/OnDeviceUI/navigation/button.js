"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var native_1 = __importDefault(require("@emotion/native"));
var ActiveBorder = native_1.default.View(function (_a) {
    var active = _a.active, theme = _a.theme;
    return ({
        backgroundColor: active ? theme.borderColor || '#e6e6e6' : 'transparent',
        height: 3,
    });
});
var ButtonText = native_1.default.Text(function (_a) {
    var theme = _a.theme, active = _a.active;
    return ({
        color: active ? theme.buttonActiveTextColor || '#444444' : theme.buttonTextColor || '#999999',
        paddingHorizontal: 8,
        paddingVertical: 10,
        fontSize: 11,
    });
});
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onPress = function () {
            var _a = _this.props, onPress = _a.onPress, id = _a.id;
            onPress(id);
        };
        return _this;
    }
    Button.prototype.render = function () {
        var _a = this.props, active = _a.active, children = _a.children, testID = _a.testID;
        return (react_1.default.createElement(react_native_1.TouchableOpacity, { testID: testID, onPress: this.onPress, activeOpacity: 0.8 },
            react_1.default.createElement(ButtonText, { active: active }, children),
            react_1.default.createElement(ActiveBorder, { active: active })));
    };
    return Button;
}(react_1.PureComponent));
exports.default = Button;
