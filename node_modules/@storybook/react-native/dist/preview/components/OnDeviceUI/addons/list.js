"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var native_1 = __importDefault(require("@emotion/native"));
var button_1 = __importDefault(require("../navigation/button"));
var Container = native_1.default.View(function (_a) {
    var theme = _a.theme;
    return ({
        flexDirection: 'row',
        borderBottomWidth: 1,
        borderBottomColor: theme.borderColor || '#e6e6e6',
    });
});
var AddonList = /** @class */ (function (_super) {
    __extends(AddonList, _super);
    function AddonList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderTab = function (id, title) {
            var _a = _this.props, addonSelected = _a.addonSelected, onPressAddon = _a.onPressAddon;
            return (react_1.default.createElement(button_1.default, { active: id === addonSelected, key: id, id: id, onPress: function () { return onPressAddon(id); } }, title.toUpperCase()));
        };
        return _this;
    }
    AddonList.prototype.render = function () {
        var _this = this;
        var panels = this.props.panels;
        var addonKeys = Object.keys(panels);
        return (react_1.default.createElement(Container, null,
            react_1.default.createElement(react_native_1.ScrollView, { showsHorizontalScrollIndicator: false, horizontal: true }, addonKeys.map(function (id) { return _this.renderTab(id, panels[id].title); }))));
    };
    return AddonList;
}(react_1.PureComponent));
exports.default = AddonList;
