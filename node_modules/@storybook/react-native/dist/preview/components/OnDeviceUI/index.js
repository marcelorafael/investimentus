"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var native_1 = __importDefault(require("@emotion/native"));
var addons_1 = __importDefault(require("@storybook/addons"));
var StoryListView_1 = __importDefault(require("../StoryListView"));
var StoryView_1 = __importDefault(require("../StoryView"));
var addons_2 = __importDefault(require("./addons"));
var panel_1 = __importDefault(require("./panel"));
var navigation_1 = __importDefault(require("./navigation"));
var absolute_positioned_keyboard_aware_view_1 = __importDefault(require("./absolute-positioned-keyboard-aware-view"));
var constants_1 = require("./navigation/constants");
var animation_1 = require("./animation");
var ANIMATION_DURATION = 300;
var IS_IOS = react_native_1.Platform.OS === 'ios';
// @ts-ignore: Property 'Expo' does not exist on type 'Global'
// eslint-disable-next-line no-underscore-dangle
var getExpoRoot = function () { return global.Expo || global.__expo || global.__exponent; };
exports.IS_EXPO = getExpoRoot() !== undefined;
var IS_ANDROID = react_native_1.Platform.OS === 'android';
var flex = { flex: 1 };
var Preview = native_1.default.View(flex, function (_a) {
    var disabled = _a.disabled, theme = _a.theme;
    return ({
        borderLeftWidth: disabled ? 0 : 1,
        borderTopWidth: disabled ? 0 : 1,
        borderRightWidth: disabled ? 0 : 1,
        borderBottomWidth: disabled ? 0 : 1,
        borderColor: disabled ? 'transparent' : theme.previewBorderColor || '#b3b3b3',
    });
});
var absolutePosition = { position: 'absolute', top: 0, bottom: 0, left: 0, right: 0 };
var OnDeviceUI = /** @class */ (function (_super) {
    __extends(OnDeviceUI, _super);
    function OnDeviceUI(props) {
        var _this = _super.call(this, props) || this;
        _this.onLayout = function (_a) {
            var previewWidth = _a.previewWidth, previewHeight = _a.previewHeight;
            _this.setState({ previewWidth: previewWidth, previewHeight: previewHeight });
        };
        _this.handleOpenPreview = function () {
            _this.handleToggleTab(constants_1.PREVIEW);
        };
        _this.handleToggleTab = function (newTabOpen) {
            var tabOpen = _this.state.tabOpen;
            if (newTabOpen === tabOpen) {
                return;
            }
            react_native_1.Animated.timing(_this.animatedValue, {
                toValue: newTabOpen,
                duration: ANIMATION_DURATION,
                useNativeDriver: true,
            }).start();
            _this.setState({
                tabOpen: newTabOpen,
                // True if swiping between navigator and addons
                slideBetweenAnimation: tabOpen + newTabOpen === constants_1.PREVIEW,
            });
            // close the keyboard opened from a TextInput from story list or knobs
            if (newTabOpen === constants_1.PREVIEW) {
                react_native_1.Keyboard.dismiss();
            }
        };
        var tabOpen = props.tabOpen || constants_1.PREVIEW;
        _this.state = {
            tabOpen: tabOpen,
            slideBetweenAnimation: false,
            previewWidth: react_native_1.Dimensions.get('window').width,
            previewHeight: react_native_1.Dimensions.get('window').height,
        };
        _this.animatedValue = new react_native_1.Animated.Value(tabOpen);
        _this.channel = addons_1.default.getChannel();
        return _this;
    }
    OnDeviceUI.prototype.render = function () {
        var _a = this.props, stories = _a.stories, url = _a.url, isUIHidden = _a.isUIHidden, shouldDisableKeyboardAvoidingView = _a.shouldDisableKeyboardAvoidingView, keyboardAvoidingViewVerticalOffset = _a.keyboardAvoidingViewVerticalOffset;
        var _b = this.state, tabOpen = _b.tabOpen, slideBetweenAnimation = _b.slideBetweenAnimation, previewWidth = _b.previewWidth, previewHeight = _b.previewHeight;
        var previewWrapperStyles = [
            flex,
            animation_1.getPreviewPosition(this.animatedValue, previewWidth, previewHeight, slideBetweenAnimation),
        ];
        var previewStyles = [flex, animation_1.getPreviewScale(this.animatedValue, slideBetweenAnimation)];
        return (react_1.default.createElement(react_native_1.SafeAreaView, { style: [flex, { paddingTop: IS_ANDROID && exports.IS_EXPO ? react_native_1.StatusBar.currentHeight : 0 }] },
            react_1.default.createElement(react_native_1.KeyboardAvoidingView, { enabled: !shouldDisableKeyboardAvoidingView || tabOpen !== constants_1.PREVIEW, behavior: IS_IOS ? 'padding' : null, keyboardVerticalOffset: keyboardAvoidingViewVerticalOffset, style: flex },
                react_1.default.createElement(absolute_positioned_keyboard_aware_view_1.default, { onLayout: this.onLayout, previewHeight: previewHeight, previewWidth: previewWidth },
                    react_1.default.createElement(react_native_1.Animated.View, { style: previewWrapperStyles },
                        react_1.default.createElement(react_native_1.Animated.View, { style: previewStyles },
                            react_1.default.createElement(Preview, { disabled: tabOpen === constants_1.PREVIEW },
                                react_1.default.createElement(StoryView_1.default, { url: url, onDevice: true, stories: stories })),
                            tabOpen !== constants_1.PREVIEW ? (react_1.default.createElement(react_native_1.TouchableOpacity, { style: absolutePosition, onPress: this.handleOpenPreview })) : null)),
                    react_1.default.createElement(panel_1.default, { style: animation_1.getNavigatorPanelPosition(this.animatedValue, previewWidth) },
                        react_1.default.createElement(StoryListView_1.default, { stories: stories })),
                    react_1.default.createElement(panel_1.default, { style: animation_1.getAddonPanelPosition(this.animatedValue, previewWidth) },
                        react_1.default.createElement(addons_2.default, null))),
                react_1.default.createElement(navigation_1.default, { tabOpen: tabOpen, onChangeTab: this.handleToggleTab, initialUiVisible: !isUIHidden }))));
    };
    return OnDeviceUI;
}(react_1.PureComponent));
exports.default = OnDeviceUI;
