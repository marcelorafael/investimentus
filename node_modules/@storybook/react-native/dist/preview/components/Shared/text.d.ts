/// <reference types="@emotion/core" />
export declare const Header: import("@emotion/styled-base").StyledComponent<import("react-native").TextProps & import("react").RefAttributes<import("react-native").Text>, {
    selected: boolean;
}, {
    backgroundColor: string;
    headerTextColor: string;
    labelColor: string;
    borderColor: string;
    previewBorderColor: string;
    buttonTextColor: string;
    buttonActiveTextColor: string;
}>;
export declare const Name: import("@emotion/styled-base").StyledComponent<import("react-native").TextProps & import("react").RefAttributes<import("react-native").Text>, {
    selected: boolean;
}, {
    backgroundColor: string;
    headerTextColor: string;
    labelColor: string;
    borderColor: string;
    previewBorderColor: string;
    buttonTextColor: string;
    buttonActiveTextColor: string;
}>;
export declare const Label: import("@emotion/styled-base").StyledComponent<import("react-native").TextProps & import("react").RefAttributes<import("react-native").Text>, Pick<import("react-native").TextProps & import("react").RefAttributes<import("react-native").Text>, "style" | "allowFontScaling" | "ellipsizeMode" | "lineBreakMode" | "numberOfLines" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "maxFontSizeMultiplier" | "adjustsFontSizeToFit" | "minimumFontScale" | "suppressHighlighting" | "selectable" | "selectionColor" | "textBreakStrategy" | "accessible" | "accessibilityLabel" | "accessibilityRole" | "accessibilityStates" | "accessibilityHint" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors">, {
    backgroundColor: string;
    headerTextColor: string;
    labelColor: string;
    borderColor: string;
    previewBorderColor: string;
    buttonTextColor: string;
    buttonActiveTextColor: string;
}>;
